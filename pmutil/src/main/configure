#!/bin/bash
# Configuration script for pmutil package
# Usage:
# 	configure [options] [destination_folder]
# Options:
#

usage() {
	echo "Usage: configure [OPTIONS] [DESTINATION_FOLDER]"
	echo "Configure pmutil package."
	echo
	echo "Mandatory arguments to long options are mandatory for short options too."
	echo "  -h,  --help                     print this page"
	echo
}

Color_Off='\033[0m'       # Text Reset
BRed="\e[1;31m"           # Red
BGreen='\033[1;32m'       # Green
Blue='\033[0;34m'         # Blue
BCyan='\e[1;36m'	  # Cyan

print_error() {
	echo -e "${BRed}Error: $1 ${Color_Off}"
}

print_warning() {
	echo -e "${BGreen}Warning: $1 ${Color_Off}"
}

print_info() {
	echo -e "${BCyan}$1 ${Color_Off}"
}

exit_on_error() {
	print_warning "Processing stop on error."
}

echo
echo -e "${BGreen}configure, version 1.1.0${Color_Off}"
echo -e "${Blue}Configure pmutil package.${Color_Off}"
echo

a="$(pwd)/$0"
BASE_FOLDER=${a%/configure}
DEST_FOLDER="$HOME/bin"

# process command line parameters
while [[ $# -gt 0 ]]; do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		*)
			#print_error "bad command line option: $1"
			DEST_FOLDER=$1
			shift
			;;
	esac
done

echo "Script folder: $BASE_FOLDER"
echo "Destination folder: $DEST_FOLDER"
echo

##############################
# Check external dependencies
##############################

warn_version() {
	readarray -td. actver <<<"$1" 
	readarray -td. minver <<<"$2" 

	local num=${#actver[@]}
	if [ ${#minver[@]} -lt "$num" ]; then
		num=${#minver[@]}
	fi
	
	for (( j = 0; j < $num; j += 1 )) ; do
		local a=${actver[$j]}
		local m=${minver[$j]}
		if [ ${actver[$j]} -lt ${minver[$j]} ]; then
			print_warning "$3 version '$1' is lesser than required minimal version of '$2'."
			return
		fi
	done 
	
	echo "$3 version '$1' OK."
}

print_info "Checking external dependecies."

# python3

PYTHON3_VERSION=$(python3 --version | head -n1 | cut -d" " -f2)
PYTHON3_MINVERSION=3.6.0
warn_version "$PYTHON3_VERSION" "$PYTHON3_MINVERSION" "python3"

# python3 numpy

NUMPY_VERSION=$(pip3 list 2> /dev/null | grep "numpy" | sed 's/[^0-9\.]//g')
NUMPY_MINVERSION=1.16
warn_version "$NUMPY_VERSION" "$NUMPY_MINVERSION" "python3/numpy"

# python3 xmltodict

XMLTODICT_VERSION=$(pip3 list 2> /dev/null | grep "xmltodict" | sed 's/[^0-9\.]//g')
XMLTODICT_MINVERSION=0.12.0
warn_version "$XMLTODICT_VERSION" "$XMLTODICT_MINVERSION" "python3/xmltodict"

# python3 astropy

XMLTODICT_VERSION=$(pip3 list 2> /dev/null | grep "astropy" | sed 's/[^0-9\.]//g')
XMLTODICT_MINVERSION=4.0
warn_version "$XMLTODICT_VERSION" "$XMLTODICT_MINVERSION" "python3/astropy"

# python3 matplotlib

XMLTODICT_VERSION=$(pip3 list 2> /dev/null | grep "matplotlib" | sed 's/[^0-9\.]//g')
XMLTODICT_MINVERSION=3.1
warn_version "$XMLTODICT_VERSION" "$XMLTODICT_MINVERSION" "python3/matplotlib"

# FITSH

FITSH_VERSION=$(ficalib --version | head -n1 | cut -d"(" -f2 | cut -d"@" -f1)
FITSH_MINVERSION=0.9.3
warn_version "$FITSH_VERSION" "$FITSH_MINVERSION" "FITSH"

# RawTran

RAWTRAN_VERSION=$(rawtran --version | head -n1 | cut -d"," -f2)
RAWTRAN_MINVERSION=0.3.8
warn_version "$RAWTRAN_VERSION" "$RAWTRAN_MINVERSION" "rawtran"

# ExifTool

EXIFTOOL_VERSION=$(exiftool -ver | head -n1)
EXIFTOOL_MINVERSION=10.80
warn_version "$EXIFTOOL_VERSION" "$EXIFTOOL_MINVERSION" "exiftool"

# Astrometry.net solve_field

ASTROMETRY_VERSION=$(solve-field --help | grep "Revision" | cut -d" " -f2 | cut -d"," -f1)
ASTROMETRY_MINVERSION=0.77
warn_version "$ASTROMETRY_VERSION" "$ASTROMETRY_MINVERSION" "Astrometry.net"

# SExtractor

SEXTRACTOR_VERSION=$(sextractor --version | head -n1 | cut -d" " -f3)
SEXTRACTOR_MINVERSION=2.19.5
warn_version "$SEXTRACTOR_VERSION" "$SEXTRACTOR_MINVERSION" "SExtractor"

# wcstools

WCSFTOOL_VERSION=$(sethead 2> shtmp; grep "WCSTools" shtmp | cut -d" " -f3 | cut -d"," -f1; rm shtmp)
WCSTOOL_MINVERSION=3.9.5
warn_version "$WCSFTOOL_VERSION" "$WCSTOOL_MINVERSION" "wcstool"

####################################
# Copy sources to user's bin folder
####################################

assert_source_exist() {
	if [ ! -e "${BASE_FOLDER}"/"$1" ]; then
		print_error "Source script $1 is missing."
		exit 0
	fi
}

copy_source() {
	assert_source_exist "$1"
	cp "${BASE_FOLDER}"/"$1" "${DEST_FOLDER}"/$2
}

create_link() {
	# $1 - src
	# $2 - dest
	ln -s "${DEST_FOLDER}"/S1 "${DEST_FOLDER}"/S2
}

if [ ! -e "$DEST_FOLDER" ]; then
	mkdir "$DEST_FOLDER"
	echo "Create destination folder $DEST_FOLDER."
fi

print_info "Copy scripts to $DEST_FOLDER."

copy_source "bash/ppl-setup" "ppl-setup"
copy_source "bash/ppl-disco" "ppl-disco"
copy_source "bash/ppl-calibration" "ppl-calibration"
copy_source "bash/ppl-clean" "ppl-clean"
copy_source "python/pmfilter.py" "pmfilter.py"
copy_source "python/pmphot.py" "pmphot.py"
copy_source "python/pmresult.py" "pmresult.py" 
copy_source "python/pmlt2ut.py" "pmlt2ut" 
copy_source "python/pmdateobs.py" "pmdateobs" 
copy_source "python/pmrefcat.py" "pmrefcat.py" 
copy_source "python/pplphotometry.py" "pplphotometry.py"
copy_source "python/pmbase.py" "pmbase.py"
copy_source "python/img_scale.py" "img_scale.py"
copy_source "python/pmcolorize.py" "pmcolorize"

create_link "pmrefcat.py" "ppl-refcat"
create_link "pplphotometry.py" "ppl-photometry"
#create_link "pplcalibration.py.py" "ppl-calibration"
#create_link "pmclean.py" "ppl-clean"
#create_link "pmcolorize.py" "ppl-colorize"

chmod 0755 "${DEST_FOLDER}/*"

#############################
# copy external config files
#############################

CONFIG_FOLDER="$HOME/.pmlib"
print_info "Copy config files to $CONFIG_FOLDER."

CONFIG_BASE=${BASE_FOLDER%/src/main}
CONFIG_BASE="$CONFIG_BASE/etc"

if [ ! -d "$CONFIG_FOLDER" ]; then
	mkdir "$CONFIG_FOLDER"
fi

# sextractor files: sex.cfg, sex.param
cp "$CONFIG_BASE/sex.cfg" "$DEST_FOLDER"
cp "$CONFIG_BASE/sex.param" "$DEST_FOLDER"
cp "$CONFIG_BASE/astrometry.cfg" "$DEST_FOLDER"

print_info "Configure pmutil successfully ended."
