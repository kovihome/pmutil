#!/bin/bash
# Calibration pipeline
# Usage:
# 	ppl-calibration [options]
# Options:
#

usage() {
	echo "Usage: ppl-calibration [OPTIONS]... [BASE_FOLDER]"
	echo "Make calibration process for raw or fits images."
	echo
	echo "Mandatory arguments to long options are mandatory for short options too."
	echo "  -c,  --color arg                set filter(s), arg is the color code, default color is 'Gi', for available color codes see below"
	echo "  -cc, --count-combine n          set number of frames to combine in the sequence, 0 means all frames, default is 0"
	echo "  -f,  --flat                     make master flat frame only"
	echo "  -mf, --master-flat folder       use the given master-flat folder"
	echo "  -t,  --image-time LT|UT         specify orignal image time zone, LT=local time, UT=universal time"
	echo "  -w,  --overwrite                force to overwrite existing results"
	echo "  -e,  --on-error noop|skip|stop  specify what to do on error: noop=nothing to do; skip=remove the file on processing; stop=stop processing at all"
	echo "  -h,  --help                     print this page"
	echo
	echo "Available filter color codes are:"
	echo "  Gi | G | gi | g         green channel"
	echo "  Bi | B | bi | b         blue channel"
	echo "  Ri | R | ri | r         red channel"
	echo "  all | ALL | All         all channels, results 3 separate frame"
	echo
}

Color_Off='\033[0m'       # Text Reset
BRed="\e[1;31m"           # Red
BGreen='\033[1;32m'       # Green
Blue='\033[0;34m'         # Blue
BCyan='\e[1;36m'	  # Cyan

print_error() {
	echo -e "${BRed}Error: $1 ${Color_Off}"
}

print_warning() {
	echo -e "${BGreen}Warning: $1 ${Color_Off}"
}

print_info() {
	echo -e "${BCyan}$1 ${Color_Off}"
}

exit_on_error() {
	print_warning "Processing stop on error."
}

echo
echo -e "${BGreen}ppl-calibration, version 1.0.0${Color_Off}"
echo -e "${Blue}Calibrate a set of RAW or FITS images.${Color_Off}"
echo

# Common arguments (saturation level, image section & trimming, etc.):
COMMON_ARGS="--saturation 16000 --trim"
FISTAR_ARGS="--algorithm uplink --prominence 0.0 --model elliptic --format id,x,y,s,d,k,amp,flux"
GRMATCH_ARGS="--col-ref 2,3 --col-ref-ordering +8 --col-inp 2,3 --col-inp-ordering +8 --weight reference,column=4,magnitude,power=2 \
	--triangulation maxinp=100,maxref=100,conformable,auto,unitarity=0.002 --order 2 --max-distance 3 --comment"
FICOMBINE_ARGS="-m sum -n"

# command line options
COLOR_CHANNEL=("Gi")
FORCE_OVERWRITE=0
SHOW_HELP=0
COUNT_COMBINE=0
FLAT_ONLY=0
USE_MASTER_FLAT=0
# timestamp in the image, values are: LT (for local time) or UT (universal time) 
IMAGE_TIME="LT"
MASTER_FLAT=""
BASE_FOLDER=""
ON_ERROR="noop"

# process command line parameters
ARGS_SAVE=$*
while [[ $# -gt 0 ]]; do
	case "$1" in
		-c|--color)
			case "$2" in
				Gi|G|gi|g)
					COLOR_CHANNEL=("Gi")
					;;
				Bi|B|bi|b)
					COLOR_CHANNEL=("Bi")
					;;
				Ri|R|ri|r)
					COLOR_CHANNEL=("Ri")
					;;
				all|ALL|All)
					COLOR_CHANNEL=("Gi" "Bi" "Ri")
					;;
				*)
					print_error "bad color value: $2, using Gi instead."
					COLOR_CHANNEL=("Gi")
					;;
			esac
			shift
			shift
			;;
		-w|--overwrite)
			FORCE_OVERWRITE=1
			shift
			;;
		-f|--flat)
			FLAT_ONLY=1
			shift
			;;
		-mf|--master-flat)
			USE_MASTER_FLAT=1
			MASTER_FLAT=$2
			shift
			shift
			;;
		-cc|--count-combine)
			COUNT_COMBINE=$2
			shift
			shift
			;;
		-t|--image-time)
			if [ "$2" == "LT" ] || [ "$2" == "UT" ]; then
				IMAGE_TIME=$2
			else
				print_error "bad image time zone value: $2, using default $IMAGE_TIME instead."
			fi
			shift
			shift
			;;
		-e|--on-error)
			if [ "$2" == "noop" ] || [ "$2" == "stop" ] || [ "$2" == "skip" ]; then
				ON_ERROR=$2
			else
				print_error "bad on-error instruction; available values are: noop, stop, skip."
			fi
			shift
			shift
			;;
		-h|--help)
			SHOW_HELP=1
			shift
			;;
		*)
			#print_error "bad command line option: $1"
			BASE_FOLDER=$(echo "$1" | sed 's/\/$//')
			shift
			;;
	esac
done

if [ $SHOW_HELP -eq 1 ]; then
	usage
	exit 0
fi

if [ ! "$BASE_FOLDER" == "" ] ; then
  if [ ! -d "$BASE_FOLDER" ] ; then
    print_error "Base folder $BASE_FOLDER not exists or not a directory."
    exit 1
  else
    echo "base folder: $BASE_FOLDER"
  fi
fi

echo "colors: ${COLOR_CHANNEL[*]}"
echo "force: $FORCE_OVERWRITE"
echo "count combine: $COUNT_COMBINE"

# save command into file
if [ "$BASE_FOLDER" != "" ]; then
	echo "ppl-calibration $ARGS_SAVE" > "$BASE_FOLDER"/calibration
else
	echo "ppl-calibration $ARGS_SAVE" > ./calibration
fi

######################### discover pipeline elements

#set -x

# default setup
. "ppl-setup"

if [ ! -d "$PMLIB" ]; then
	mkdir "$PMLIB"
	mv "$HOME/bin/astrometry.cfg" "$PMLIB"
	mv "$HOME/bin/sex.cfg" "$PMLIB"
	mv "$HOME/bin/sex.param" "$PMLIB"
fi

TEMPDIR="temp"

. "ppl-disco" $FLAT_ONLY $USE_MASTER_FLAT $BASE_FOLDER

if [ ! "$MASTER_FLAT" == "" ] ; then
  if [ ! -d "$MASTER_FLAT" ] ; then
    print_error "Master-flat folder $MASTER_FLAT not exists."
    exit 1
  else
    has_master=1
    for c in "${COLOR_CHANNEL[@]}" ; do
      echo "$MASTER_FLAT/${MASTER_FLAT_FILE}-${c}.fits"
      if [ ! -e "$MASTER_FLAT/${MASTER_FLAT_FILE}-${c}.fits" ] ; then
        print_error "No ${c} master-flat file in the directory $MASTER_FLAT"
        has_master=0
      fi
    done
    if [ ${has_master} = 1 ] ; then
      FLAT_FOLDER=$MASTER_FLAT
      echo "master-flat: $MASTER_FLAT"
    else
      exit 1
    fi
  fi
fi

# create the temp dir, if not exists
if [ ! -e $TEMPDIR ]; then
  mkdir $TEMPDIR
fi

######################### process calibration pipeline

start=$(date +%s)

im_size_arg() {
#	$1 - FITS file name
	local NAXIS1=$(fiheader --get NAXIS1 $1)
	local NAXIS2=$(fiheader --get NAXIS2 $1)
	echo "--image 0:0:$((NAXIS1-1)):$((NAXIS2-1))"
}

raw2fits_file() {
#	rawfile: $1, color: $2
	local rawfile=$1
	local FITS_NAME=${rawfile%.*}-$2.fits
	if [ $FORCE_OVERWRITE -eq 1 ] || [ ! -e "$FITS_NAME" ]; then
		echo "$rawfile -> $FITS_NAME"
		rawtran -c "$2" -o "$FITS_NAME" -B 16 -C '-4 -D' -X '-q 3 -w' "$rawfile"
		local IMAGETEMP=$(exiftool -s -g "$rawfile" | grep -i CameraTemperature | sed 's/[^0-9]//g')
		fiheader --append "CCD-TEMP=${IMAGETEMP}./CCD Temperature (Celsius)" "$FITS_NAME"
		if [ "$IMAGE_TIME" == "LT" ]; then
			local IMAGE_DATE=$(fiheader --get DATE-OBS "$FITS_NAME")
			local IMAGE_DATE_UTC=$(pmlt2ut "$IMAGE_DATE")
			sethead -s _ "$FITS_NAME" DATE-OBS="$IMAGE_DATE_UTC" DATE-IMG="$IMAGE_DATE" / "Original_image_date_(in_local_time)"
		fi
	fi
}

raw2fits() {
	# list of raw CR2 file in the input directory
	local RAWFILES=$1/*.cr2
	
	# for all raw file do the conversion
	for rawfile in $1/*.cr2; do
		for color in "${COLOR_CHANNEL[@]}"; do
			raw2fits_file "$rawfile" "$color"
		done
	done
}

make_master_bias() {
	local BIASLIST=($1/${BIAS_FILE_PREFIX}*-$2.fits)
	if [ ! -e "${BIASLIST[0]}" ]; then
		return 1
#	  echo -e "${BRed}Error: No bias files in the directory.${Color_Off}"
#	  exit 1
	fi
	
	echo "$1/${BIAS_FILE_PREFIX}*-$2.fits -> $1/${MASTER_BIAS_FILE}-$2.fits"
	
	# Calibrated images: all the images have the same name but put into a separate directory ($TARGET):
	local R_BIASLIST=($(for f in ${BIASLIST[*]} ; do echo ${TEMPDIR}/$(basename "$f") ; done ))
	
	# The calibration of the individual bias frames, followed by their combination into a single master image:
	ficalib -i ${BIASLIST[*]} $COMMON_ARGS $(im_size_arg ${BIASLIST[0]}) -o ${R_BIASLIST[*]}
	ficombine ${R_BIASLIST[*]} --mode median -o $1/${MASTER_BIAS_FILE}-$2.fits

	# cleanup: remove temp files
	for f in ${R_BIASLIST[*]} ; do rm -f $f ; done

	return 0
}

make_master_dark() {

	# Names of the individual files storing the raw bias, dark, flat and object frames:
	local DARKLIST=($1/${DARK_FILE_PREFIX}*-$2.fits)
	#echo ${DARKLIST[*]}
	if [ ! -e ${DARKLIST[0]} ]; then
		return 1
#	  echo -e "${BRed}Error: No dark files in the directory.${Color_Off}"
#	  exit 1
	fi

	echo "$1/${DARK_FILE_PREFIX}*-$2.fits -> $1/${MASTER_DARK_FILE}-$2.fits"

	# Calibrated images: all the images have the same name but put into a separate directory ($TARGET):
	local R_DARKLIST=($(for f in ${DARKLIST[*]} ; do echo ${TEMPDIR}/$(basename $f) ; done ))

	# The calibration of the individual bias frames, followed by their combination into a single master image:
	ficalib -i ${DARKLIST[*]} $COMMON_ARGS $(im_size_arg "${DARKLIST[0]}") -o ${R_DARKLIST[*]} --input-master-bias $3/${MASTER_BIAS_FILE}-$2.fits
	ficombine ${R_DARKLIST[*]} --mode median -o $1/${MASTER_DARK_FILE}-$2.fits

	# Calculate average ccd temperature from .cr2 files, and set it into the master dark
	local sum=0
	local count=0
	for f in $1/${DARK_FILE_PREFIX}*.cr2 ; do
	  IMAGETEMP=$(exiftool -s -g $f | grep -i CameraTemperature | sed 's/[^0-9]//g')
	  sum=$(( $sum+$IMAGETEMP ))
	  count=$(( $count+1 ))
	done
	local AVGTEMP=$(( ($sum+($count/2))/$count ))
	echo "average dark temperature: $AVGTEMP C"

	fiheader --append "CCD-TEMP=${AVGTEMP}./CCD Temperature (Celsius)" $1/${MASTER_DARK_FILE}-$2.fits

	# cleanup: remove temp files
	for f in ${R_DARKLIST[*]} ; do rm -f $f ; done

	return 0
}

make_master_flat() {
	# Names of the individual files storing the raw bias, dark, flat and object frames:
	FLATLIST=($1/${FLAT_FILE_PREFIX}*-$2.fits)
	if [ ! -e ${FLATLIST[0]} ]; then
		return 1
#	  	echo -e "${BRed}Error: No flat files in the directory.${Color_Off}"
#	  	exit 1
	fi

	echo "$1/${FLAT_FILE_PREFIX}*-$2.fits -> $1/${MASTER_FLAT_FILE}-$2.fits"

	# Calibrated images: all the images have the same name but put into a separate directory ($TARGET):
	R_FLATLIST=($(for f in ${FLATLIST[*]} ; do echo ${TEMPDIR}/`basename $f` ; done ))

	# The calibration of the individual flat frames, followed by their combination into a single master image:
	ficalib -i ${FLATLIST[*]} $COMMON_ARGS $(im_size_arg "${FLATLIST[0]}") --post-scale 20000 -o ${R_FLATLIST[*]} \
		--input-master-bias $3/${MASTER_BIAS_FILE}-$2.fits --input-master-dark $4/${MASTER_DARK_FILE}-$2.fits
	ficombine ${R_FLATLIST[*]} --mode median -o $1/${MASTER_FLAT_FILE}-$2.fits

	# remove temp files
	for f in ${R_FLATLIST[*]} ; do rm -f $f ; done

	return 0
}

calibrate() {
	# $1 - source directory
	# $2 - calib directory
	# $3 - color

	local MB=$BIAS_FOLDER/${MASTER_BIAS_FILE}-$3.fits
	local MD=$DARK_FOLDER/${MASTER_DARK_FILE}-$3.fits
	local MF=$FLAT_FOLDER/${MASTER_FLAT_FILE}-$3.fits

	# Names of the individual files storing the raw bias, dark, flat and object frames:
	local IOBJLIST=($1/${LIGHT_FILE_PREFIX}*-$3.fits)
	if [ ! -e ${IOBJLIST[0]} ]; then
		return 1
#	  echo -e "${BRed}Error: No light frames in the directory.${Color_Off}"
#	  exit 1
	fi

	echo "$1/${LIGHT_FILE_PREFIX}*-$3.fits -> $2/${LIGHT_FILE_PREFIX}*-$3.fits"

	# Calibrated images: all the images have the same name but put into a separate directory ($TARGET):
	local R_IOBJLIST=($(for f in ${IOBJLIST[*]} ; do echo $2/`basename $f` ; done ))

	# The calibration of the object images:
	ficalib -i ${IOBJLIST[*]} $COMMON_ARGS $(im_size_arg ${IOBJLIST[0]}) -o ${R_IOBJLIST[*]} --input-master-bias $MB \
		--input-master-dark $MD --input-master-flat $MF

	return 0
}

registrate() {
	# $1 - calib folder
	# $2 - seq folder
	# $3 - color

	# Names of the individual files storing the raw bias, dark, flat and object frames:
	local COBJLIST=($1/${LIGHT_FILE_PREFIX}*-$3.fits)
	if [ ! -e ${COBJLIST[0]} ]; then
		return 1
#	  echo -e "${BRed}Error: No light frames in the directory.${Color_Off}"
#	  exit 1
	fi

	echo "$1/${LIGHT_FILE_PREFIX}*-$3.fits -> $2/combined-$3.fits"

	# ------------------------------------

	# make reference image from the first one
	echo "set reference image: ${COBJLIST[0]}"
	local REF="${TEMPDIR}/ref-$3.stars"
	fistar ${COBJLIST[0]} $FISTAR_ARGS -o $REF
	cp ${COBJLIST[0]} ${TEMPDIR}/`basename ${COBJLIST[0]}`

	# Registration of the source images:
	for f in ${COBJLIST[*]:1} ; do

	  local bn=`basename $f`

	  echo "transform $f -> ${TEMPDIR}/${bn}"
	  local fstars="${TEMPDIR}/${bn}.stars"
	  local ftrans="${TEMPDIR}/${bn}.trans"

	  fistar $f $FISTAR_ARGS -o $fstars

	  grmatch $GRMATCH_ARGS --input $fstars --reference $REF --output-transformation $ftrans

	  local match_failed=`grep -c "Match failed" ${ftrans}`
	  if [ ${match_failed} == 1 ]; then
	    print_error "Match failed on $f."
	    if [ $ON_ERROR == "stop" ]; then
	    	exit_on_error
	    fi
	  fi

	  if [ ${match_failed} == 0 ] || [ $ON_ERROR == "noop" ]; then
	  	fitrans $f --input-transformation $ftrans --reverse -k -o ${TEMPDIR}/${bn}
	  fi

	done

	# list of transformed frames
	local TROBJLIST=($TEMPDIR/${LIGHT_FILE_PREFIX}*-$3.fits)

	# create a sequence of combined frames
	if (( $COUNT_COMBINE != 0 )); then
	  for (( a=0; a<${#TROBJLIST[*]}; a+=$COUNT_COMBINE )) ; do
	    printf -v fi "%03g" $((a/COUNT_COMBINE))
	    echo "combine $2/${SEQ_FILE_PREFIX}${fi}.fits"
	    ficombine ${TROBJLIST[*]:a:COUNT_COMBINE} $FICOMBINE_ARGS -o $2/${SEQ_FILE_PREFIX}${fi}-$3.fits
	    pmdateobs $2/${SEQ_FILE_PREFIX}${fi}-$3.fits ${TROBJLIST[*]:a:COUNT_COMBINE}
	  done
	fi

	# create a combined frame of all images
	echo "combine $TEMPDIR/${LIGHT_FILE_PREFIX}*-$3.fits -> $2/Combined-$3.fits"
	ficombine ${TROBJLIST[*]} $FICOMBINE_ARGS -o $2/Combined-$3.fits
	pmdateobs $2/Combined-$3.fits ${TROBJLIST[*]} 

	# cleanup - remove temp files
	for f in ${TROBJLIST[*]} ; do rm -f $f ; done
	rm -f $REF
	rm -f ${TEMPDIR}/*.stars
	rm -f ${TEMPDIR}/*.trans
}

masters_exist() {
	local EXISTS=1
	for color in "${COLOR_CHANNEL[@]}"; do
		MB=$1/$2-$color.fits
		if [ ! -f $MB ]; then 
			EXISTS=0 
		fi
	done
	return $EXISTS
}

process_bias() {
	masters_exist $1 $MASTER_BIAS_FILE
	local exists=$?
	if [ $FORCE_OVERWRITE -eq 1 ] || [ $exists -eq 0 ]; then
		print_info "$2: Convert bias RAW files to FITS."
		raw2fits $1

		print_info "$2: Create master bias file(s)."
		for color in "${COLOR_CHANNEL[@]}"; do
			make_master_bias $1 $color 
		done
	else
		print_info "$2: Master bias file(s) are already created."
	fi
	# TODO: create bias FITS files in temp folder
	# TODO: cleanup - delete bias FITS files
}

process_dark() {
	masters_exist $1 $MASTER_DARK_FILE
	local exists=$?
	if [ $FORCE_OVERWRITE -eq 1 ] || [ $exists -eq 0 ]; then
		print_info "$3: Convert dark RAW files to FITS."
		raw2fits $1

		print_info "$3: Create master dark file(s)."
		for color in "${COLOR_CHANNEL[@]}"; do
			make_master_dark $1 $color $2
		done
	else
		print_info "$3: Master dark file(s) are already created."
	fi
	# TODO: create dark FITS files in temp folder
	# TODO: cleanup - delete dark FITS files
}

process_flat() {
	print_info "$4: Convert flat RAW files to FITS."
	raw2fits $1

	print_info "$4: Create master dark file(s)."
	for color in "${COLOR_CHANNEL[@]}"; do
		make_master_flat $1 $color $2 $3
	done
}

process_calibration() {
	# S1 - light folder
	# S2 - calib folder
	# $3 - title
	print_info "$3: Convert light RAW files to FITS."
	raw2fits $1

	print_info "$3: Create calibrated light file(s)."

	# Create dir for the calibrated images, if not exists
	if [ ! -e $2 ]; then
	  mkdir $2
	fi

	for color in "${COLOR_CHANNEL[@]}"; do
		calibrate $1 $2 $color
	done
	# TODO: cleanup - delete light FITS files

	return 
}

process_registration() {

	print_info "$3: Create calibrated light file(s)."

	# Create the sequence dir, if not exists
	if [ ! -e $2 ]; then
	  mkdir $2
	fi

	for color in "${COLOR_CHANNEL[@]}"; do
		registrate $1 $2 $color
	done
	# TODO: cleanup - delete light FITS files



}

####################################
# step 1. create master bias frame
####################################

if [ "$FLAT_ONLY" == "0" ] ; then

  process_bias $BIAS_FOLDER "BIAS"

####################################
# step 2. create master dark frame
####################################

  process_dark $DARK_FOLDER $BIAS_FOLDER "DARK"

fi

if [ "$USE_MASTER_FLAT" == "0" ] ; then

	# process flat bias, flat dark and flat, only if flat master is not exist
	masters_exist $FLAT_FOLDER $MASTER_FLAT_FILE
	exists=$?
	if [ $FORCE_OVERWRITE -eq 1 ] || [ $exists -eq 0 ]; then

############################################################################
# step 3. create master flat bias frame, if it is differs from master bias
############################################################################
#	if [ $FLAT_BIAS_FOLDER != $BIAS_FOLDER ]; then
		process_bias $FLAT_BIAS_FOLDER "FLAT BIAS"
#	fi

############################################################################
# step 4. create master flat dark frame, if it is differs from mastre dark
############################################################################
#	if [ $FLAT_DARK_FOLDER != $DARK_FOLDER ]; then
		process_dark $FLAT_DARK_FOLDER $FLAT_BIAS_FOLDER "FLAT DARK"
#	fi

##############################
# step 5. create master flat
##############################
		process_flat $FLAT_FOLDER $FLAT_BIAS_FOLDER $FLAT_DARK_FOLDER "FLAT"

	else
		print_info "FLAT: Master flat file(s) are already created."
	fi

fi

##################################
# step 6. calibrate light frames
##################################
#set -x
if [ "$FLAT_ONLY" == "0" ] ; then

  for lf in ${LIGHT_FOLDERS[@]} ; do

    cf=${lf//${LIGHT_FOLDER_NAME}/${CALIB_FOLDER_NAME}}

    process_calibration $lf $cf "CALIBRATE"

###############################################
# step 7. registrate and combine light frames
###############################################

    sf=${lf//${LIGHT_FOLDER_NAME}/${SEQ_FOLDER_NAME}}

    process_registration $cf $sf "REGISTRATE"

  done

fi
#set +x

end=`date +%s`

echo
echo -e "${Blue}Calibration is ready."
echo -e "execution time was $((end-start)) seconds.${Color_Off}"

# end.

